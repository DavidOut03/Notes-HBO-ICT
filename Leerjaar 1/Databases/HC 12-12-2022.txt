5e hoorcollege databases
2e hoorcollege over SQL

BIJ WEEK 15 IN BRIGHTSPACE:
Maak de huiswerkopdracht om te oefenen.
Op het tentamen krijk je **open vragen**.

Functies op 1 tabel
===================
Rekenkundige bewerkingen: + - * /
	SELECT titel, leeftijdscategorie + 2
	FROM film

	Geeft de titel-leeftijdscategorie paren uit de
	film tabel. Maar de leeftijd is met 2 verhoogd.

	HIERBIJ WORDT DE DATA IN DE DATABASE **NIET**
	VERANDERD

	Geen idee wat de use-case voor deze query is.
	En de docent geeft ook toe dat hij het ook niet
	weet.

	NULL + 2 = NULL
	NULL - 2 = NULL

	SELECT year(geboortedatum)
	FROM acteur

	Pakt het geboortejaar van alle acteurs.

	SELECT 2022-year(geboortedatum)
	FROM acteur

	Leeftijd van alle acteurs (die dit jaar al jarig
	zijn geweest, anders is het off by 1)

	SELECT year(now())-year(geboortedatum)
	FROM acteur

	Leeftijd van alle acteurs (onafhankelijk van het
	huidige jaar, off by 1 voor wie dit jaar nog niet
	jarig is geweest)

	SELECT year(now())-year(geboortedatum) AS leeftijd
	FROM acteur

	Doet hetzelfde als de vorige query maar veranderd
	de naam van de kolom naar "leeftijd" ipv
	"year(now())-year(geboortedatum)"

	SELECT titel
	FROM films
	WHERE speelduur / 60 < 2

Andere functies:
- count
	Telt het aantal records (het aantal regels).

	SELECT count(*)
	FROM review

	Telt het aantal regels in review.

	SELECT count(*) AS aantal
	FROM review

	Telt het aantal regels in review en hernoemt de
	kolom naar "aantal".

	SELECT count(beschrijving)
	FROM review

	Telt het aantal regels in review waarbij de
	"beschrijving"-kolom niet NULL is.

	SELECT count(*)
	FROM review
	WHERE beschrijving IS NOT NULL

	Doet hetzelfde als het vorige voorbeeld, maar is een
	iets langere query.

	SELECT count(*) as aantal_films
	FROM film
	WHERE leeftijdscategorie <> 12

	Geeft het aantal films waarvan de leeftijdscategorie
	niet 12 is.

	MOGELIJKE TOETSSTOF:
	NULL is niet gelijk aan 12
	NULL is niet ongelijk aan 12
	
	NULL is niet gelijk aan wat dan ook
	NULL is niet ongelijk aan wat dan ook

	NULL is NULL
	NULL is niet niet NULL

- sum
	Geeft de som van de waardes uit een kolom.
- min
	Geeft de laagste waarde uit de kolom.
- max
	Geeft de hoogste waarde uit de kolom.
- avg
	Geeft de gemiddelde waarde van de kolom.

ONDERSCHAT HET NIET!

Op BrightSpace staat de huiswerkopdracht die je *voor*
het prakticum dient te maken.

Onder het kopje "toetsing" zie je "Deeltoets 2 SQL"
Hier staat wat je moet weten voor deeltoets 2.
Ook is er een kopje "Proeftoets Deeltoets 2 SQL"
Daar kan je oefenen met de toets. Ook de correcte
uitwerking kan je op BS vinden.

De punten op de uitwerking geeft is alles of niets.
Je haalt alle punten bij een perfect antwoord en geen
punten als je ook maar een klein foutje hebt gemaakt.

Advies: maak de proeftoets op papier (zoals ook op het
tentamen moet gebeuren).

Belangrijk op het tentamen: ** HEEL GOED LEZEN **
Voorbeeld:

Vraag:
Geef het aantal verschillende landen waar acteurs vandaan
komen.

Antwoord:
SELECT count(distinct geboorteland) as aantal
FROM acteur

Niet het antwoord:
SELECT distinct count(geboorteland) as aantal
FROM acteur

Want dat geeft het aantal acteurs waarvan het geboorteland
bekend is. En filtert de dubbele waardes (maar er is maar
1 record, namelijk die met het aantal acteurs waarvan een
geboorteland bekend is)

Geef de totale tijd die je nodig hebt om alle 16+ films
te bekijken

SELECT sum(speelduur) as totale_speelduur
FROM film
WHERE leeftijdscategorie = 16

Haal 5 minuten van elke film af VOOR het optellen

SELECT sum(speelduur - 5) as totale_speelduur
FROM film
WHERE leeftijdscategorie = 16

Hoeveel cijfers zijn er uitgedeeld, en wat is het gemiddelde

SELECT count(cijfer) as aantal, sum(cijfer) / count(cijfer) as gemiddelde
FROM review

Volgende 2 queries zijn **geen** tentamenstof, maar wel handig te weten:

SELECT round(sum(cijfer))
FROM review

Geeft de som van alle cijfers afgerond op een geheel getal

SELECT round(sum(cijfer, 1))
FROM review

Geeft de som van alle cijfers afgerond op 1 decimaal

Geef alle films van na het jaar 2000:
SELECT titel
FROM film
WHERE jaar > 2000

LET OP! jaar >= 2000 is **FOUT** want de vraag is **NA** 2000, niet *vanaf*
2000.

SELECT max(jaartal) - min(jaartal) as jaarverschil,
max(speelduur) - min(speelduur) as duurverschil
FROM film
WHERE leeftijdscategorie is not null

SELECT avg(speelduur) as gemiddelde_speelduur
FROM film

Toont de gemiddelde speelduur van alle films.

SELECT avg(speelduur) as gemiddelde_speelduur
FROM film
WHERE leeftijdscategorie = 12

Toont de gemiddelde speelduur van de films met leeftijdscategorie 12

SELECT avg(speelduur) - min(speelduur), max(speelduur) - avg(speelduur)
FROM film
WHERE leeftijdscategorie = 12

Q & A:
Q: Wat als je year(now()) gebruikt, en terwijl de data
wordt opgehaald, slaat de klok 0:00 (overgang 31 dec naar
1 jan). Is dan een deel van de resultaten berekend op
basis van het vorige jaar?
A: Yup, maar is geen tentamenstof
Q: Gaan we ook normaliseren?
A: Nee