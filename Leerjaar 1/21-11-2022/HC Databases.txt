Het gegevensmodel hebben we al behandeld.
Relationeel representatiemodel ook.
	Alle attributen moeten ACTHER elkaar en tussen haken.

Relationeel Implementatiemodel:
	Enkelvoudige sleutel
	CREATE TABLE tabelnaam (
		kolomnaam1 int not null,
		kolomnaam2 char(10),    // Exact aantal tekens
		kolomnaam3 varchar(10), // Max aantal tekens
		kolomnaam4 date,        // Datum
		primary key (kolomnaam1)
	);

	Samengestelde sleutel + foreign key
	CREATE TABLE tabelnaam (
		kolomnaam1 int not null,
		kolomnaam2 char(10) not null, // Exact aantal tekens
		kolomnaam3 varchar(10), // Max aantal tekens
		kolomnaam4 date,        // Datum
		primary key (kolomnaam1, kolomnaam2),
		foreign key (kolomnaam3) references tabelnaam2 (kolomnaam2)
		on delete (cascade | set null | no action)
		on update ...
	);

	cascade: verwijder regisseur -> verwijder films met vreemde sleutel naar deze
		regisseur.
		update regisseur -> update films met vreemde sleutel naar deze regisseur.
	set null: verwijder regisseur -> films met deze regisseur krijgen null als
		regisseur.
		Maar in dit voorbeeld kan dat niet omdat de regisseur kolom van film niet
		null mag zijn.
		update regisseur -> films van deze regisseur hebben geen regisseur meer.
	no action: verwijder regisseur -> ERROR als deze regisseur nog films heeft
		update regisseur -> ERROR als deze regisseur nog films heeft.

	Bij on delete cascade kan een kettingreactie ontstaan.

	Bij ELKE foreign key MOET je on delete EN on update specificeren.

	Datatypen van SQL kan je op google een lijst met types vinden
	die in SQL bestaan.

	char is sneller dan varchar.

De vreemde sleutel en de primaire sleutel waar die naar wijst moeten
EXACT hetzelfde type zijn.

Recap van een belangrijke nuance:
ER IS MAAR 1 PRIMAIRE SLEUTEL.
	De primaire sleutel kan wel uit meerdere
	kolommen bestaan. Je noemt het nog steeds
	maar 1 primaire sleutel.

Relationeel implementatiemodel
	Bij het maken van dit model bepaal je
	vaak ook al welke database je gaat
	gebruiken.

	Voor de challenge is deze les belangrijk.

	Implementatiemodel is GEEN onderdeel van het tentamen.
	In MySQL Workbench kan je een relationeel implementatiemodel maken.

	CREATE SCHEMA databasename;

Tentamen volgende week:
	1 opgave (30 minuten):
		Je krijgt een tekst en je moet
		er een klassediagram van maken.
	1 opgave (30 minuten):
		Je krijgt een klassediagram en je
		moet er een relationeel model van
		maken.

Bij een veel-op-veel relatie blijft de samengestelde sleutel bestaan.

SQL = Structured Query Language
	Taal die standaard bij databases wordt gebruikt.
	Hier heb ik al ~3 jaar ervaring mee.
DDL = Data Definition Language
	CREATE
	ALTER
	DROP
DML = Data Manipulation Language
	INSERT
	UPDATE
	DELETE
	SELECT (les 4/5/6)

INSERT INTO tabelnaam VALUES
(waarde_1e_rij_1e_kolom, waarde_1e_rij_2e_kolom),
(waarde_2e_rij_1e_kolom, waarde_2e_rij_2e_kolom)

Test door een waarde te inserten met een foreign key die wijst naar een niet bestaande
primairy key waarde. Dat zou een ERROR moeten geven.

Als je een waarde verwijderd maar er is nog een foreign key waarde die er naar verwijst.
Dan zou je ook een ERROR moeten krijgen als no action is gekozen voor on delete.

Als je een update uitvoert en on update is als cascade ingesteld. Dan zouden de
verwijzingen ook geupdate moeten worden.

In MySQL Workbench kun je een database delen als volgt:
	Server -> Data Export
		Export to self-contained file
		Include create schema
		Start Export
	Server -> Data Import
		Om date te importeren.

Huiswerkopdracht:
	Zie afbeelding.