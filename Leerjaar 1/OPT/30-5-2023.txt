Herhaling van SOLID:

Single Responsibility Principle (SRP):
- Beperk je in 1 class tot 1 globale verantwoordelijkheid
- Als je een class kan opsplitsen, dan is dat vaak wel verstandig :)
- CodeSmells--;

Open-Closed Principle (OCP):
- De applicatie kan worden uitgebreid (open)
- Maar de rest van de applicatie hoeft niet te worden aangepast daarbij (closed)
- CodeSmell "Switch-statement" wordt vaak veroorzaakt door het niet toepassen van OCP
- Vervang de switch voor Polymorphism

Liskov Substitution Principle (LSP):
- Je moet een instance van een class kunnen vervangen voor een instance van een subclass (zowel syntactisch als semantisch)
- Soms moet je een parent class en een child class verder uit elkaar halen door er een grandparent en een grandchild van te maken (door er een class tussen te plaatsen)

Interface Segragation Prinicple (ISP):
- Interface scheiden op zo een manier dat je de class ook kan opsplitsen

Dependency Inversion (DIP):
- Als je weet dat je een stuk code gaat vervangen voor een andere implementatie (zoals de AI in het product), dan plaats je dat achter een interface wat je later kan vervangen voor de 
real deal

Verplaats data-classes naar de database

Primitive obsession:
- Je gebruikt primitive types waar een class verstandiger is