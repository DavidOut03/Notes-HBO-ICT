# Architecture and Design 2

## Beveiligingsprincipes
### Isolatie
Aanvalsoppervlakte zo klein mogelijk maken. Dus maar 1 ingang tot het systeem. De toegangspoort van het kasteel.
Containers gebruiken met bijvoorbeeld docker. Dat is een programma wat je op een computer kan draaien, wat ik nu begrijp is dat dat een computer simuleert, dus een soort VM.
De VM is ook als voorbeeld door Damian gegeven enkele ogenblikken later, dus ik denk dat ik het snap.

### Veilige defaults
Zorg dat de poort standaard dicht is, en niet standaard open. Deur altijd op slot, tenzij die echt open moet.
Standaard alleen toegang tot wat echt, absoluut noodzakelijk is. De standaard moet zijn dat je geen toestemming geeft.

### Volledigheid
Alleen toegang als je authorisatie hebt, alles wordt gelogd, van iedereen wordt de identiteit gevalideerd. De poortwachter waar je je moet melden voor binnenkomst.
Als je ook maar iets van twijfel hebt over of iemand gemachtigd is, wantrouwen tenzij.

### Open ontwerp
De beveiliging moet ook werken als de interne werking bekend wordt. Dus geen security by obscurity. Gebruik wat al lang gebruikt wordt en bewezen veilig is.
Gebruik ISO standaarden, maak het open source, gebruik AES-256 encryptie met RSA.

**Q & A**
Q: Zou je niet liever sommige dingen geheim willen houden?
A: Nee, je kan beter wel open source houden en de feedback gebruiken om je beveiliging te verbeteren.

### Functiescheiding
Gevoelige delen een zwaardere vorm van authenticatie laten vereisen. Dat je bijvoorbeeld 2 poortwachters zijn, eentje laat alleen mensen door die iets weten (een wachtwoord). En de
andere laat alleen mensen binnen die iets hebben (een token). Als de hackers achter het wachtwoord komen, dan weten ze nog steeds niet het token en andersom.
De functies van de rollen kan je ook het beste scheiden, dus een rol die de content beheert, eentje die de gebruikers beheert etc. In plaats van een master admin die alles kan.

### Beperking
Zorg dat dat bepaalde resources niet toegankelijk zijn voor sommige gebruikers. Hierbij wil je voorkomen dat gebruikers mogelijk recht beschikken waardoor ze mogelijk de website,
database of andere onderdelen kunnen wijzigen.

### Compartimenmten
Zoveel mogelijk de infrastructuur van elkaar scheiden.
Elke deur zit op slot, maar niet elke deur heeft dezelfde sleutel.
Een database kan bijvoorbeeld volledig van de rest van het systeem gescheiden zijn.

**Q & A**
Q: Lijkt dit niet een beetje veel op functiescheiding?
A: Ja.

### Ergonomie
Als je het te veilig maakt, dan zijn mensen te lui, dus dan wordt het minder veilig. Een poort die zo zwaar is dat die door 4 mensen moet worden geopent, die zal dus meestal open blijven
staan uit gemak.

### Redundantie
Zorg dat de beveiliging uit meerdere systemen bestaat zodat geen enkel systeem in z'n eentje gecompromiteert kan worden met grote gevolgen.
Gebruik chaos engineering, laat een aapje rondlopen in de serverruimte die stekkers overal uit trekt en dingen kapot maakt om te kijken of stuff nog steeds werkt.
Zowel een poort, als een ophaalbrug.

### Diversiteit
Combineer verschillende systemen die allemaal gecompromiteerd moeten worden voordat er een beveiligingsprobleem is. Soort swissed cheese.

## General Q & A:
### Wat moeten we precies voor de toets weten?
Sws moet je weten wat er in de slides staat en waar uitleg over is gegeven. Je hoeft niet de hele slides uit je hoofd te leren, zo lang je de stof maar begrijpt en de begrippen kent en
kunt toepassen. Ook moet je de begrippen herkennen etc. Op Brightspace staat ook literatuur onder *2023 Security, Integrity & Etics VT* onder Lesoverzicht > wk1
### Komt er een oefentoets?
Waarschijnlijk niet, maar er is wel een toetsmatrix die aangeeft hoeveel procent van de toets over welk onderwerp gaat.