Malware kan heel lang niks doen, wat later iets raars kan doen.

Hoe ontwerp je veilige software? En hoe ontwerp je systemen die onveiligheid in de software detecteerd?

Wat is er recent misgegaan in een applicatie?
- Laatst lag het rooster eruit.
- De beveiliging is niet goed georganiseerd.

Wat is de oplossing?
Preventie:
- Docent krijgt training als die een fout maakt.
- Systeem moet beter beveiligd worden tegen hackers door 2FA te vereisen bij het inloggen.
- Er moeten betere hardware controles komen.
- Duidelijk in kunnen zien wat de aanpassingen zijn wanneer deze worden gemaakt. Verschil tussen oude en nieuwe aanpassingen.
Detectie:
- Mailtje wanneer het rooster verdwijnt.
- De persoon die het moet oplossen moet de mail in de gaten houden. En het mailadres moet goed te vinden zijn.
Repressie:
- Waarschuw iedereen. Gevolgen worden beperkt.
- Voor grote aanpassingen pas bij de student doorvoeren zodra een peer de wijziging heeft gereviewd.
Correctie:
- Zet backups terug. Probleem wordt gecorrigeerd.
- Sneller doorgeven dat er iets mis is.

**GEFELICITEERD, U HEEFT GRATIS LESSEN GEWONNEN BIJ DE PLUSKLAS: WOENSDAGEN IN SL 8.93 VAN 14:00 TOT 15:30!! U BENT UITGENODIGD!! IN IEDER GEVAL TOT 4 OKTOBER!!**
Bij de plusklas kunt u extra uitdaging krijgen bovenop de normale les. Georganiseerd door de maker van SmartBot.
27 september gaan we **public key cryptography** vanaf 0 opbouwen.