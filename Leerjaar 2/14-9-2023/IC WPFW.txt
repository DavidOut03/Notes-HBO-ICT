Async voorbeeldje:

```cs
namespace Async_Programming
{
    class Worker
    {
        public async Task<int> add(int a, int b)
        {
            await Task.Delay(1000);
            return a + b;
        }

        public async Task<int> mul(int a, int b)
        {
            await Task.Delay(1000);
            return a * b;
        }
    }

    internal class Program
    {
        public static async Task Main(string[] args)
        {
            var worker = new Worker();

            var result1 = worker.add(1, 2);
            var result2 = worker.mul(1, 2);

            int[] results = await Task.WhenAll(result1, result2);

            Console.WriteLine(results[0]);
            Console.WriteLine(results[1]);

            Console.WriteLine("Hello, World!");
        }
    }
}
```

Ook hebben we gewerkt met extensiefuncties:

```cs
namespace ExtensieFunctieVoorbeeld {
  public class Program {
    public static string AantalString(this int num) {	// `this` als een argument maakt het een extensiefunctie
      return num.ToString();
    }

    public static void Main(string[] args) {
      int x = 0;
      string waarde = x.AantalString();
    }
  }
}
```

Ook hebben we met getters en setters gewerkt. Voel je vrij om mij om hulp te vragen.

Voor de toets moeten we kunnen werken met de `dotnet` commands. Je moet dus een nieuw project aan kunnen maken met de cmd (en niet alleen vanuit visual studio). Visual studio doet al deze
shit voor je, maar we moeten het ook kunnen doen met VS Code.

Wat we moeten kennen:
```
dotnet new sln
dotnet new console -o <name>
dotnet new --project <name>
dotnet run
dotnet test
```