**ORM: Object Relational Mapper**

Serialisatie: object geschrikt maken om op te slaan.
Bijvoorbeeld: XML of JSON

Classes worden tabellen
Objecten worden rijen
Properties worden kolommen
string wordt varchar
bool wordt bit
nullable worden **niet** `NOT NULL` **dubbele ontkenning**

In code kan je een veel op veel relatie maken zonder tussentabel. In een database kan dat niet.

```cs
struct Student {
  public List<Klas> volgt { get; set; }
}

struct Klas {
  public List<Student> studenten { get; set; }
}
```

In een database moet de veel-op-veel relatie met een tussentabel.

Anemic (mager, in de vorm van geen OOP): dat je je concentreert op de representatie van data.

Met efcore moet je altijd een Context aanmaken die de database representeert. Die moet erven van `DbContext`. Die moet `OnConfiguring` overriden.

Om packages aan je project toe te voegen.
```bash
dotnet add package <package>
```

Op BrightSpace staat een stappenplan om je stuff werkend te krijgen.

Data annotaties moet je ook kennen.

Commands voor de toets:
```bash
dotnet new console --name NameOfMyConsoleApp
dotnet new console --name NameOfMyConsoleApp --use-program-main
cd NameOfMyConsoleApp
dotnet run
dotnet test
dotnet add package <packagename>
```