We behandelen LINQ. Donderdag zal ORM aan bod komen.

LINQ is heel handig om bijvoorbeeld database querys uit te voeren, ORM is iets met databases.

Lazy evaluatie is belangrijk bij LINQ.

```cs
using System.Linq;

var lijst = new List<Student>() {
	new Student() { ID = 1, Naam = "John", Leeftijd = 18 },
	new Student() { ID = 2, Naam = "Steve", Leeftijd = 21 },
	new Student() { ID = 3, Naam = "Bill", Leeftijd = 18 },
	// Paar rijen niet meegenomen
};

lijst.Where(s => s.Leeftijd > 18).Select(s => s.ID + ": " + s.Naam).ToList().ForEach(student => Console.WriteLine(student.ID));
lijst.GroupBy(s => s.Leeftijd).ToList().ForEach(group => group.ToList().ForEach(student => Console.WriteLine(student.ID)));
```

AsParallel zorgt ervoor dat stuff wordt geparalleliseerd.
  **LET OP! Stop het resultaat van AsParallel in een nieuwe variabele of gebruik het meteen, anders dan doet de compiler er niet aan mee.**
Select is een lambda expressie om een object uit de lijst om te zetten in een ander object.
Where filtert de lijst van objecten.
ToList converteert naar een List. Die vraag alles op (op een niet-lazy manier, dus echt alles wat die kan krijgen wordt opgehaald, ook al wordt dit later niet gebruikt).
ForEach itereert over alle items die in de list zitten en voert er een actie op uit.
Count telt het aantal rijen.
Skip slaat de eerste paar items over.
Sum telt alle waardes bij elkaar op.
Take pakt de eerste paar items. Deze is lazy, die vraagt het pas op zodra de data nodig is. Als je Take(40).Take(20) doet, dan worden er maar 20 opgevraagt.
OrderBy verandert de volgorde van de items.
Distinct pakt een lijst maar haalt de dubbelen weg.
All kijkt of alle items aan een criterium voldoet.
Any kijkt of er een item in wat aan een criterium voldoet.
Aggregate voert een functie f(a, b) uit op de items als f(f(f(item1, item2), item3), item4).
GroupBy groepeert. 
First vraagt het eerste element wat aan een eis voldoet.
FirstOrDefault doet First maar geeft null terug als er niks is ipv een exception.
Single als je zeker weet dat er maar 1 item aan de voorwaarde voldoet, dan kan je single gebruiken. Die geeft een error als er iets anders dan 1 item uitkomt.
SingleOrDefault geeft null als de waarde niet is gevonden of niet uniek is (in plaats van een error te gooien).

De methodes zijn lazy, dus ze worden alleen maar uitgevoerd zodra je daadwerkelijk de waardes opvraagt.
Als je dus First() gebruikt, en het eerste item gevonden is, dan wordt er niet verder gezocht.

LINQ werkt met extensie methods, dat zijn methodes die niet in de class zitten, maar die later worden toegevoegd. Dat is waarom je na ToList nog steeds LINQ methodes uit kan voeren.

De volgorde van Where en Select ligt niet vast, maar als je de Where later doet dan de Select dan heeft de Where alleen toegang tot de data waar de Select naartoe mapt.

Op de toets moet je waarschijnlijk ook "leuke combinaties verzinnen met deze methoden"

LINQ (Language INtegrated Query) kan je gebruiken op alles wat IEnumerable is.

IEnumerable is een interface waarop je foreachloops kan uitvoeren, ook LINQ gebruikt IEnummerables.
IList ook.

Je kan zelf zoiets implementeren. Dit moet je ook voor de toets kennen:

```cs
public class Program {
	IEnumerable<int> Fibonacci(int n) {
		List<int> reeks = new List<int>();
		int n1 = 1;
		int n2 = 1;
		for (int i = 0; i < n; i++) {
			reeks.Add(n1);
			int opgeteld = n1 + n2;
			n1 = n2;
			n2 = opgeteld;
		}
		return reeks;
	}

	IEnumerable<int> Fibonacci() {
		int n1 = 1;
		int n2 = 1;
		while (true) {
			yield return n1;
			int opgeteld = n1 + n2;
			n1 = n2;
			n2 = opgeteld;
		}
	}

	public static void Main(string[] args) {
		foreach (int getal in Fibonacci()) {
			Console.WriteLine(getal);
		}
	}
}
```