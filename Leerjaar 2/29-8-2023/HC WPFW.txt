We gaan met Webframeworks werken:
- ASP.net Core, React
- LINQ, EntityFramework
- REST, CRUD, API, SQL

Testen:
- Security
- Usability

Webprogramming:
- HTML
- CSS
- JavaScript

We gaan iets doen met C#, voor de herfstvakantie gaan we aan de backend werken:
1. C#
2. Testen Mocks
3. Async- en functioneel programmeren
4. LINQ en ORM
5. Internet (incl. HTTP, versies en redirects)
6. API
7. Testen

Na de herfstvakantie doen we frontend:
8. Human Computer Interaction
9. HTML
10. React
11. Meer React
12. Deployment & Testen
13. Architectuurontwerp

Ja, de punten die ik heb benoemd is hoe het op de slides stond.

Er zijn 2 klassen voor Hans, 2 voor Marcel, en 1 voor Steven. Misschien goed om te weten, waarschijnlijk niet belangrijk.

Tips:
- Doe alvast iets met C#, ASP.NET en React
- Uiteraard kan het geen kwaad om de rest van de punten bovenaan deze aantekeningen alvast onder de loep te nemen
- Lees de pretpark case, daar hoort ook een oefening bij die we bij het werkcollege ook al gaan behandelen.

Een project aanmaken in VSCode kan op deze manier:
dotnet new console -lang "C#" -n "MijnProject" -o .
dotnet new sln -n "MijnSolution"
dotnet sln add "MijnProject.csproj"

Vervolgens gaf de docent een voorbeeld van een programma in Java, en hetzelfde programma in C#.

Alles wat we van Java hebben geleerd, is ook mogelijk in C#, alleen met andere Syntax.

Een object wordt een {instantie} genoemd van een class.
Het process van het creeren van objecten heet {instantiëren}.
De karakteristieken van een object heten {properties}.
{private} is de default modifier van een {fields} van een class.

Opties: static, public, creëren, members, properties, instantie, private, fields, instantiëren, protected, internal, methods

Een programma wat zonder errors en warnings compileert is {syntactisch} correct. Het kan nogsteeds semantisch onjuist zijn, dat zijn dan bugs.

Een waarde wordt op de stack opgeslagen in C#, volgens mij is dat ook in Java het geval.
Voor een object wordt alleen een geheugenadres opgeslagen op de stack wat wijst naar waar het object zich bevind.

Swap<T> (T x, T y) {
  T z = x;
  x = y;
  y = z;
}

Waar of niet waar?
A. Geheugen (de)allocatie is een verantwoordelijkheid van de .NET runtime (onwaar)
B. ASP.NET Core is een open source framework waarmee cross platform apps ontwikkeld kunnen worden (waar)
C. Een statement heeft een return type (onwaar)
D. Een expressie heeft een type (waar? statement overgeslagen door docent)

Opdracht:
Generic list maken van {iets}, geen idee wat, het was heel snel weg.