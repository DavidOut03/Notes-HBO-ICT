# Tests
## Unit test
Je test individuele units (functies), vaak geautomatiseerd.
Bij voorkeur is een testcase onafhankelijk van de andere testcases.
Ook gebruik je *mocking* om alle onderdelen die je niet wil testen ook daadwerkelijk niet test.

## Functionele tests
Test of de software goed werkt. Dit doe je op basis van de *functionele specificaties* om de kwaliteit te beoordelen.
De situatie is vooraf beschreven, de actie is beschreven en het verwachte resultaat is beschreven.
Selenium en Specflow zijn een paar frameworks die je kan gebruiken voor functionele tests.

## Acceptatietests
De laatste test voordat de software wordt uitgeleverd. De test die bepaald of je de software accepteert. Ookwel een *user test* genoemd omdat deze vaak door de gebruiker gedaan wordt.
Ook een *functionele specificatietest* genoemd.

## Overige tests
### Integratietests
Waarbij de modules worden gecombineerd en je het als een geheel tests.

### Regressietest
Voeg een functionaliteit toe en test of de niet-aangepaste software nog werkt.

# Behavior Driven Development (BDD)
- Beschrijf eerst het gewenste gedrag, en ga daarna pas programmeren.
- BDD gebruikt een taal die door domein experts en software engineers allebei begrijpen. Een gedeeld vacabulaire tussen stakeholders, domein experts en engineers.
- Zo een taal heet een *ubiquitous language*
- Tests zijn obv *user stories* en worden in *ubiquitous language* geschreven.

## Specflow
Een framework dat BDD ondersteund en werkt in .net. Specflow gebruikt Gherkin.

Voorbeeld van feature file:
```
Feature: BMI
BMI berekenen
@tag5
Scenario: BMI berekenen
  Given De webserver is geopend.
  And Ik geef het geslacht "man" aan.
  And Ik voer de leeftijd 57 in.
  And Ik voer het gewicht 75 in.
  And Ik voer de lengte 175 in.
  When Ik druk op de knop Bereken resultaat.
  Then laat de waarde 23 op het scherm zien.
```

(Bijna) elke regel van de feature file hoort bij een regel in de step definition file.

Je kan ook meerdere tests specificeren in een feature file die dan in de step definition file moet je dan een loop maken.

Ga experimenteren met step definition files en feature files en probeer het te laten werken.

```bash
dotnet new mstest -n SpecFlowDemo
cd SpecFlowDemo
dotnet add package SpecFlow
dotnet add package SpecFlow.Tools.MsBuild.Generation
dotnet add package SpecFlow.MsTest
dotnet add package SpecFlow.Net.Test.Sdk
```

# Q & A
## Moeten we een feature file opstellen op de toets?
Waarschijnlijk niet, maar je moet wel weten hoe specflow werkt.
Je hoeft waarschijnlijk geen code te schrijven op de toets.
Er komen waarschijnlijk wel vragen die checken of je weet hoe een feature file en een spep definition file verband houden.