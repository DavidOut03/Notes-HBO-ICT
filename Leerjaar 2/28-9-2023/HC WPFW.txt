# Internet

## Herhaling ORM / LINQ
### ORM Terugblik
Dat de classes in de code ongeveer 1 op 1 in de database te vinden zijn.
Default constructor is noodzakelijk.
Gebruik van properties is ook noodzakelijk voor het framework.
Id met een hoofdletter 'i' is de conventie voor de primary key.
Nog een conventie is het gebruik van annotaties/constraints:
```cs
[Table("Studenten")]
[StringLength=10)]
[Key]
[Required]
[Column]
[NotMapped]
```
Niet alle constraints zijn door SqlLite ondersteund.

**Q & A**
Q: Wat houd NotMapped in?
A: Gegevens die niet in de database opgenomen hoeven worden `transient`

Als server kan je `.` gebruiken in de connect-string als je lokaal werkt.

### Entity Framework Core
**Zet een migration klaar**
```bash
dotnet ef migration add Eerste
```

**Wat is een migration?**
Verandering in de database, of de creatie van de database.

**Seeden van de database (vullen van de tabellen)**
```bash
dotnet ef migration add Eerste
dotnet ef database update
```
### Explicit loading
```cs
context.Studenten.Where(student => student.Id == 1).Single();
context.Studenten.Entry(bob).Collection(student => Student.Grades).Load();
```
### Raw SQL
Je kan ook SQL rechtstreeks uitvoeren met het framework.
```cs
String sqlStatement = "SELECT * FROM speakers WHERE Country = 'USA'";
var results = dbContext.Speakers.FromSql(sqlStatement).ToList();
```
## Internet
### Waarom een backend?
Zonder backend kan de applicatie geen logica uitvoeren.
Backend doet de logica van de app.
Frontend is waar de leek ook wel wat van weet, namelijk de opmaak en de knoppen etc. De backend is de code die achter de schermen de logica uitvoerd.
### Websites vs apps
**Native**
Vereist geen andere software op de computer (behalve besturingssysteem)
**Website**
Vereist internet en open je in de browser. Weinig interactie.
**Webapp**
Website met veel interactie.
**Hybrid app**
Webapp die een mini-browser meelevert.
### HTTP
HyperText Transfer Protocol, geeft onder anderen informatie van de client aan de server en de geaccepteerde encodings.
### OSI Model
SSL = Secure Socket Layer
TCP = Transmission Control Protocol
UDP = User Datagram Protocol
IP = Internet Protocol
Laag 7 (Application Layer), poort 80 en 443 zijn belangrijk, voor een reden. Ik ben afgeleid.
### Socket
Socket is iets waar je iets in steekt. Een connector of contactdoos.
**Internet Socket**
Een eindpunt. Datagram socket, en stream socket hebben we ook.
Een datagram socket kan datagrammen verzenden of ontvangen zonder eerst een verbinding te hebben.
Een stream socket stelt een betrouwbare bytestroom tussen de hosts op. TCP is hier een voorbeeld van.

# Obfuscation
Onleesbaar maken of verbergen.
# Minification
Zo kort mogelijk maken van de code.

# HTTP operaties en status-codes moet je kennen.
[Wikipedia - List of HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)
## 2xx
Success
## 3xx
Redirect en informational
## 4xx
Client Error
# 5xx
Server Error