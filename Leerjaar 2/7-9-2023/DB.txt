Gebruik op de toets alleen LIKE als het echt niet anders kan.

** Vergelijkingsoperatoren **
```sql
<          Kleiner dan
>          Groter dan
=          Gelijk aan
<>    !=   Niet gelijk aan
=>         Groter dan of gelijk aan
<=         Kleiner dan of gelijk aan
```

Vergelijkingsoperatoren werken in SQL ook op tekst, niet alleen op nummerieke waardes. In Java kan je deze alleen op nummerieke waardes gebruiken, maar SQL is daar flexibeler in.

Goed om te testen: hoofdletter / kleine letters met groterdan teken.

** WHERE vs HAVING **
WHERE filtert de rijen die je terugkrijgt
HAVING filtert de groepen die je terugkrijgt (in verband met GROUP BY)

Gebruik `DISTINCT (kolom)` om de unieke waardes te krijgen. `COUNT(DISTINCT kolom)` om het aantal unieke waardes te krijgen.

** Joins **
JOIN, dit is hetzelfde als een INNER JOIN, maar dan zonder INNER.
INNER JOIN, dit levert het carthesisch product als je geen ON gebruikt.
OUTER JOIN, nog niet behandeld.

Carthesisch product bestaat uit rijen die je niet wil hebben. Je kan het aantal rijen uitrekenen door het aantal regels van elke tabel met elkaar te vermenigvuldigen.
Met ON filter je welke kolommen gelijk aan elkaar moeten zijn.

** UNAIRE JOIN **
Join van tabel op zichzelf.

** LEFT JOIN **
Een join waarbij je sws alle data uit de linker tabel te zien krijgt. Als er geen connectie is met de andere tabel is die data NULL.

** RIGHT JOIN **
Een join waarbij je sws alle data uit de rechtere tabel te zien krijgt. Als er geen connectie is met de andere tabel is die data NULL.

** Een van de opdrachten **
```sql
SELECT naam, adres FROM Persoon JOIN Kunstwerk ON Persoon.code = Kunstwerk.koper WHERE Kunstwerk.nr = 3411;
```

Kolom alias met "AS"
Tabel alias door de alias achter de tabel te zetten (met een spatie - geen leesteken - tussen de tabelnaam en de alias)

Als je een alias gebruikt is de originele naam niet meer beschikbaar.

** Hoe maak je de juiste comments over welke kolommen van welke tabellen hetzelfde moeten zijn? **
We kijken naar de lijntjes tussen de tabellen. Elk lijntje vereist een aantekening van de link.
Dit kan je het beste doen voordat je begint met de eerste vraag van de toets.
Dit kan je in een commentaarregel schrijven. Deze INNER JOIN kan je keer op keer gebruiken.

** Voorbeeld **
-- ON bestelling.klant = klant.nr
Deze ON kan je in meerdere opdrachten gebruiken, dus die hoef je niet meer heel vaak te typen.
Unaire associatie: als een tabel een associatie met zichzelf heeft.
OUTER JOIN: Ik denk dat dat is om de unaire associatie goed te laten werken, maar dat moet nog uitgelegd worden.

Comments in SQL begin je met 2 streepjes (--).

** Uitwerking opdracht op Brightspace (even gekopieerd van mijn incomplete uitwerkingen die ik eerder al had) **

Select op 1 tabel-Kolomfuncties_Bouwbedrijf1.pdf
```sql
SELECT naam, woonplaats FROM Medewerker;
SELECT code, naam FROM Functie;
SELECT code AS project FROM Medewerker JOIN Werkt ON Werkt.medewerker = Medewerker.nr JOIN Project ON Werkt.project = Project.code ORDER BY project DESC;
SELECT DISTINCT woonplaats FROM Medewerker WHERE woonplaats IS NOT NULL;
SELECT naam FROM Medewerker WHERE uurloon < 130;
SELECT naam AS project FROM Project WHERE projectleider IS NOT NULL;
SELECT naam FROM Medewerker WHERE naam LIKE '%e%';
SELECT naam, uurloon FROM Medewerker WHERE uurloon BETWEEN 110 AND 140;
SELECT naam, woonplaats FROM Medewerker WHERE naam > woonplaats;
SELECT uurloon * 2 AS dubbel_salaris FROM Medewerker WHERE nr >= 14;
SELECT nr AS medewerker FROM Medewerker JOIN Werkt ON Werkt.medewerker = Medewerker.nr JOIN Project ON Werkt.project = Project.code WHERE Project.code IN ('A', 'B');
SELECT naam FROM Medewerker WHERE woonplaats = 'Lisse' OR uurloon = 100;
SELECT naam, functie, uurloon FROM Medewerker WHERE (functie = 'PL' OR uurloon = 100) AND (functie <> 'PL' OR uurloon <> 100);
SELECT TOP 3 naam, 'woont in' AS 'woont in', woonplaats FROM Medewerker ORDER BY naam ASC;
SELECT TOP 3 CONCAT(naam, ' woont in ', woonplaats) as "Adresgegevens" FROM Medewerker ORDER BY naam ASC;
SELECT CAST(ROUND(uurloon / 3.0, 1) AS DECIMAL(8,1)) AS eenderde_uurloon FROM Medewerker;
SELECT COUNT(*) AS aantal FROM Medewerker;
SELECT SUM(inzet_perc) AS Totale_inzet FROM Werkt;
SELECT COUNT(*) AS aantal_medewerkers, COUNT(baas) AS heeft_baas FROM Medewerker;
SELECT MIN(uurloon) AS Laagste_uurloon FROM Medewerker WHERE woonplaats <> 'Leiden' AND woonplaats IS NOT NULL;
SELECT COUNT(*) AS aantal, MIN(uurloon) AS laagste, MAX(uurloon) AS hoogste, ROUND(AVG(uurloon), 0) AS gemiddelde FROM Medewerker WHERE woonplaats = 'Leiden';
```

Select op 1 tabel-Kolomfuncties_Burgerzaken.pdf
```sql
SELECT naam FROM Burger ORDER BY adres DESC;	-- Vraag 1
SELECT DISTINCT deelkantoor FROM Aanvraag;		-- Vraag 2
SELECT naam FROM Vergunning WHERE afdeling = 'Burgerzaken';		-- Vraag 3
SELECT vergunning, datum FROM Aanvraag WHERE betaald = 'J';		-- Vraag 4
SELECT naam FROM Vergunning WHERE aanvraagtermijn > 10;		-- Vraag 5
SELECT naam FROM Vergunning WHERE afdeling LIKE 'B%';	-- Vraag 6
-- Vraag 7
SELECT naam FROM Burger WHERE ishuurder = 'J' ORDER BY WAO;		-- Vraag 8
SELECT werkgever FROM Burger WHERE ishuurder = 'N'; -- Vraag 9
SELECT naam, kosten / jarengeldig AS kosten_per_jaar FROM Vergunning ORDER BY kosten_per_jaar;	-- Vraag 10
SELECT AVG(WAO) AS gemiddelde FROM Burger; -- Vraag 11
SELECT SUM(kosten) AS totaal_kosten FROM Vergunning WHERE afdeling = 'Burgerzaken';	-- Vraag 12
SELECT COUNT(*) AS betaald, MAX(afhaaldatum) AS laatste_afhaaldatum FROM Aanvraag WHERE betaald = 'J'; -- Vraag 13
```

Select op 1 tabel-Kolomfuncties_N6.pdf
```sql
SELECT roepnaam, achternaam ,  woonplaats , t_code FROM Lid WHERE roepnaam like 'C%' AND  is_speler = 'j' -- Vraag 1
SELECT t_code, tegenstand, datum, scheids FROM Wedstrijd WHERE scheids IS NOT NULL;  -- Vraag 2
SELECT t_code, teamnaam FROM team WHERE trainer> aanvoerder and klasse IS NOT NULL;  -- Vraag 3
SELECT DISTINCT l_code FROM dp_maker; -- Vraag 4
-- The rest is missing
```

GROUP BY-HAVING_Bouwbedrijf.pdf
```sql
-- Niet gemaakt
```

GROUP BY-HAVING_Burgerzaken.pdf
```sql
-- Niet gemaakt
```

GROUP BY-HAVING_N6.pdf
```sql
-- Niet gemaakt
```